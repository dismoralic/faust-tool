import asyncio
from telethon import TelegramClient, events
import os
import importlib
import json
import time
import subprocess
import sys

CONFIG_FILE = "config.json"
MODULES_DIR = "modules"
start_time = time.time()

def get_api_credentials():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as file:
            return json.load(file)
    
    api_id = input("–í–≤–µ–¥–∏—Ç–µ API_ID: ")
    api_hash = input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ")
    
    credentials = {"API_ID": int(api_id), "API_HASH": api_hash}
    with open(CONFIG_FILE, "w") as file:
        json.dump(credentials, file)
    
    return credentials

credentials = get_api_credentials()
client = TelegramClient("faust_tool_session", credentials["API_ID"], credentials["API_HASH"])

def load_modules(client):
    if not os.path.exists(MODULES_DIR):
        os.makedirs(MODULES_DIR)
    for filename in os.listdir(MODULES_DIR):
        if filename.endswith(".py"):
            module_name = f"{MODULES_DIR}.{filename[:-3]}"
            module = importlib.import_module(module_name)
            if hasattr(module, "register"):
                module.register(client)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: {filename}")

@client.on(events.NewMessage(pattern=r"\.update", outgoing=True))
async def update(event):
    await event.edit("üîÑ –û–±–Ω–æ–≤–ª—è—é faust tool...")
    process = subprocess.run(["git", "pull"], capture_output=True, text=True)   
    if "Already up to date." in process.stdout:
        await event.edit("‚úÖ –£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è faust-tool!")
    else:
        await event.edit("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ò–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        os.execl(sys.executable, sys.executable, *sys.argv)

@client.on(events.NewMessage(pattern=r"\.ping", outgoing=True))
async def ping(event):
    start_time_ping = time.time()
    await event.edit("testing...")
    ping_time = round((time.time() - start_time_ping) * 1000, 2)
    await event.edit(f"ping: {ping_time}ms")

@client.on(events.NewMessage(pattern=r"\.uptime", outgoing=True))
async def uptime(event):
    uptime_seconds = int(time.time() - start_time)
    hours, remainder = divmod(uptime_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    await event.edit(f"‚è≥ faust tool —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ {hours}—á {minutes}–º {seconds}—Å")

@client.on(events.NewMessage(pattern=r"\.save", outgoing=True))
async def save_self_destructing_media(event):
    reply = await event.get_reply_message()
    if reply and reply.media and reply.media.ttl_seconds:
        await client.send_message("me", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è –º–µ–¥–∏–∞:", file=reply.media)
        await event.edit("–ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    else:
        await event.edit("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è –º–µ–¥–∏–∞")

@client.on(events.NewMessage(pattern=r"\.spam (\d+) (.+)", outgoing=True))
async def spam(event):
    count = int(event.pattern_match.group(1))
    message = event.pattern_match.group(2)
    for _ in range(count):
        await event.respond(message)
    await event.delete()

@client.on(events.NewMessage(pattern=r"\.phones", outgoing=True))
async def scan_numbers(event):
    chat = await event.get_chat()
    users = await client.get_participants(chat)
    phone_numbers = {}
    for user in users:
        if user.phone:
            phone_numbers[user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"] = user.phone
    if phone_numbers:
        result = "–°–ª–∏—Ç—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(f"{name}: {phone}" for name, phone in phone_numbers.items())
        await client.send_message("me", result)
        await event.edit("–°–ª–∏—Ç—ã–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    else:
        await event.edit("–í —á–∞—Ç–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤")

from telethon import events

@client.on(events.NewMessage(pattern=r"\.help", outgoing=True))
async def help_command(event):
    help_text = "üõ† **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã faust tool:**\n"
    help_text += "‚ö°Ô∏è **.ping** - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞\n"
    help_text += "‚ö°Ô∏è **.uptime** - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã faust tool\n"
    help_text += "‚ö°Ô∏è **.info / .note** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ä–µ–ø–ª–µ–π, –∏–ª–∏ –±–µ–∑)\n"
    help_text += "‚ö°Ô∏è **.spam [–∫–æ–ª-–≤–æ] [—Ç–µ–∫—Å—Ç]** - –°–ø–∞–º\n"
    help_text += "‚ö°Ô∏è **.phones** - –°–±–æ—Ä —Å–ª–∏—Ç—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
    help_text += "‚ö°Ô∏è **.sv** - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–≥–æ—Å—è –º–µ–¥–∏–∞\n"
    help_text += "‚ö°Ô∏è **.video** - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ\n"
    help_text += "‚ö°Ô∏è **.help** - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    help_text += "‚ö°Ô∏è **.admin help** - –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞\n"
    help_text += "‚ö°Ô∏è **.trns help** - –ü–µ—Ä–µ–≤–æ–¥ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
    help_text += "‚ö°Ô∏è **.respond help** - –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫\n"
    help_text += "‚ö°Ô∏è **.call** - –ü—Ä–∏–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã—Ö 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞\n\n"
    help_text += "‚ö°Ô∏è **.dlmod** - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ faust-–º–æ–¥—É–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
    help_text += "‚ö°Ô∏è **.update** - –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏\n\n"
    help_text += "–õ–∏—à—å —Ç–æ–ª—å–∫–æ –∏–¥—É—â–∏–π –æ—Å–∏–ª–∏—Ç –¥–æ—Ä–æ–≥—É.. –ª–∏—à—å —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–π–¥–µ—Ç –≤ —Å–µ–±–µ —Å–∏–ª—É ‚Äî —à–∞–≥–Ω—É—Ç—å üïä\n"
    help_text += "Creator: `angel_xranytel`\n"
    help_text += "`2.1.0v alpha`\n\n"
    await event.edit(help_text)

load_modules(client)
client.start()
print("‚úÖ faust tool –∑–∞–ø—É—â–µ–Ω!")
client.run_until_disconnected()
