import asyncio
from telethon import TelegramClient, events
import os
import importlib
import json
import time

CONFIG_FILE = "config.json"
MODULES_DIR = "modules"
start_time = time.time()

def get_api_credentials():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as file:
            return json.load(file)
    
    api_id = input("–í–≤–µ–¥–∏—Ç–µ API_ID: ")
    api_hash = input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ")
    
    credentials = {"API_ID": int(api_id), "API_HASH": api_hash}
    with open(CONFIG_FILE, "w") as file:
        json.dump(credentials, file)
    
    return credentials

credentials = get_api_credentials()
client = TelegramClient("faust_tool_session", credentials["API_ID"], credentials["API_HASH"])

def load_modules(client):
    if not os.path.exists(MODULES_DIR):
        os.makedirs(MODULES_DIR)
    for filename in os.listdir(MODULES_DIR):
        if filename.endswith(".py"):
            module_name = f"{MODULES_DIR}.{filename[:-3]}"
            module = importlib.import_module(module_name)
            if hasattr(module, "register"):
                module.register(client)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –º–æ–¥—É–ª—å: {filename}")

@client.on(events.NewMessage(pattern=r"\.ping", outgoing=True))
async def ping(event):
    start_time_ping = time.time()
    await event.edit("testing...")
    ping_time = round((time.time() - start_time_ping) * 1000, 2)
    await event.edit(f"ping: {ping_time}ms")

@client.on(events.NewMessage(pattern=r"\.start", outgoing=True))
async def start(event):
    await event.edit("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ faust'a –≥–æ—Ç–æ–≤ –∫ —Å–ª—É–∂–±–µ")

@client.on(events.NewMessage(pattern=r"\.uptime", outgoing=True))
async def uptime(event):
    uptime_seconds = int(time.time() - start_time)
    hours, remainder = divmod(uptime_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    await event.edit(f"‚è≥ faust tool —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ {hours}—á {minutes}–º {seconds}—Å")

@client.on(events.NewMessage(pattern=r"\.info", outgoing=True))
async def info(event):
    user = await event.client.get_me()
    info_text = (f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n"
                 f"ID: {user.id}\n"
                 f"Username: @{user.username if user.username else '–ù–µ—Ç'}\n"
                 f"–ò–º—è: {user.first_name} {user.last_name if user.last_name else ''}\n")
    await event.edit(info_text)

@client.on(events.NewMessage(pattern=r"\.spam (\d+) (.+)", outgoing=True))
async def spam(event):
    count = int(event.pattern_match.group(1))
    message = event.pattern_match.group(2)
    for _ in range(count):
        await event.respond(message)
    await event.delete()

@client.on(events.NewMessage(pattern=r"\.phones", outgoing=True))
async def scan_numbers(event):
    chat = await event.get_chat()
    users = await client.get_participants(chat)
    phone_numbers = {}
    for user in users:
        if user.phone:
            phone_numbers[user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"] = user.phone
    if phone_numbers:
        result = "üìû –°–ª–∏—Ç—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(f"{name}: {phone}" for name, phone in phone_numbers.items())
        await client.send_message("me", result)
        await event.edit("‚úÖ –°–ª–∏—Ç—ã–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    else:
        await event.edit("‚ùå –í —á–∞—Ç–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤")

@client.on(events.NewMessage(pattern=r"\.you", outgoing=True))
async def get_user_info(event):
    reply = await event.get_reply_message()
    if reply and reply.sender_id:
        user = await client.get_entity(reply.sender_id)
        info_text = f"**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n"
        info_text += f"ID: {user.id}\n"
        info_text += f"Username: @{user.username if user.username else '–ù–µ—Ç'}\n"
        info_text += f"–ò–º—è: {user.first_name} {user.last_name if user.last_name else ''}\n"
        if user.phone:
            info_text += f"üìû –ù–æ–º–µ—Ä: {user.phone}\n"
        await event.edit(info_text)
    else:
        await event.edit("‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@client.on(events.NewMessage(pattern=r"\.save", outgoing=True))
async def save_self_destructing_media(event):
    reply = await event.get_reply_message()
    if reply and reply.media and reply.media.ttl_seconds:
        await client.send_message("me", "üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è –º–µ–¥–∏–∞:", file=reply.media)
        await event.edit("‚úÖ –ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    else:
        await event.edit("‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–µ—Å—è –º–µ–¥–∏–∞")

@client.on(events.NewMessage(pattern=r"\.help", outgoing=True))
async def help_command(event):
    help_text = "üõ† **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã faust tool:**\n"
    help_text += "‚ö°Ô∏è **.ping** - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞\n"
    help_text += "‚ö°Ô∏è **.start** - –ó–∞–ø—É—Å–∫ faust tool\n"
    help_text += "‚ö°Ô∏è **.uptime** - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã faust tool\n"
    help_text += "‚ö°Ô∏è **.info** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ\n"
    help_text += "‚ö°Ô∏è **.spam [–∫–æ–ª-–≤–æ] [—Ç–µ–∫—Å—Ç]** - –°–ø–∞–º\n"
    help_text += "‚ö°Ô∏è **.phones** - –°–±–æ—Ä —Å–ª–∏—Ç—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
    help_text += "‚ö°Ô∏è **.you** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
    help_text += "‚ö°Ô∏è **.sv** - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–º–æ—É–¥–∞–ª—è—é—â–µ–≥–æ—Å—è –º–µ–¥–∏–∞\n"
    help_text += "‚ö°Ô∏è **.video** - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ\n"
    help_text += "‚ö°Ô∏è **.help** - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    help_text += "‚ö°Ô∏è **.ban** - –ë–∞–Ω (–º–∏–Ω—É—Ç—ã) (–ø—Ä–∏—á–∏–Ω–∞)\n"
    help_text += "‚ö°Ô∏è **.mute** - –ú—É—Ç (–º–∏–Ω—É—Ç—ã) (–ø—Ä–∏—á–∏–Ω–∞)\n"
    help_text += "‚ö°Ô∏è **.kick** - –ö–∏–∫ (–º–∏–Ω—É—Ç—ã) (–ø—Ä–∏—á–∏–Ω–∞)\n"
    help_text += "‚ö°Ô∏è **.trns on <–∫–æ–¥>** - –ü–µ—Ä–µ–≤–æ–¥ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
    help_text += "‚ö°Ô∏è **.trns off** - –ü–µ—Ä–µ–≤–æ–¥ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç–∫–ª)\n"
    help_text += "‚ö°Ô∏è **.trns list** - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞\n"
    help_text += "‚ö°Ô∏è **.dlmod** - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ faust-–º–æ–¥—É–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
    help_text += "–ê–≤—Ç–æ—Ä: angel_xranytel\n"
    help_text += "1.0.0v alpha\n"
    await event.edit(help_text)

@client.on(events.NewMessage(pattern=r"\.nazira", outgoing=True))
async def nazira(event):
    message = await event.edit("<3")
    animation_sequence = [
        "üíò", "üíñ", "üíó", "üíô", "üíö", "üíõ", "üß°", "‚ù§Ô∏è", "‚ñë", "–ù‚ñë", "–ù–∞‚ñë", "–ù–∞–∑–∏‚ñë", "–ù–∞–∑–∏—Ä‚ñë", "–ù–∞–∑–∏—Ä–∞‚ñë",
        "–ù–∞–∑–∏—Ä–∞,‚ñë", "–ù–∞–∑–∏—Ä–∞, —è‚ñë", "–ù–∞–∑–∏—Ä–∞, —è –ª‚ñë", "–ù–∞–∑–∏—Ä–∞, —è –ª—é‚ñë", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±‚ñë", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª‚ñë",
        "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é‚ñë", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç‚ñë", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç–µ‚ñë", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç–µ–±‚ñë", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç–µ–±—è‚ñë",
        "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!üíò", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!üíñ", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!üíó", "–ù–∞–∑–∏—Ä–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!ü§ç"
    ]
    
    for text in animation_sequence:
        await message.edit(text)
        await asyncio.sleep(0.5)

    await event.delete()

@client.on(events.NewMessage(pattern=r"\.albina", outgoing=True))
async def albina(event):
    message = await event.edit("<3")
    animation_sequence = [
        "üíò", "üíñ", "üíó", "üíô", "üíö", "üíõ", "üß°", "‚ù§Ô∏è", "‚ñë", "–ê‚ñë", "–ê–ª‚ñë", "–ê–ª—å‚ñë", "–ê–ª—å–±‚ñë", "–ê–ª—å–±–∏‚ñë", "–ê–ª—å–±–∏–Ω‚ñë",
        "–ê–ª—å–±–∏–Ω–∞, —è‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é‚ñë",
        "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è‚ñë", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!‚ñë",
        "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!üíò", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!üíñ", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!üíó", "–ê–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!ü§ç",
        "‚ñë–ª—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±‚ñë", "‚ñë—å–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ‚ñë", "‚ñë–±–∏–Ω–∞, —è –ª—é–±–ª—é —Ç‚ñë", "‚ñë–∏–Ω–∞, —è –ª—é–±–ª—é‚ñë", "‚ñë–Ω–∞, —è –ª—é–±–ª‚ñë", "‚ñë–∞, —è –ª—é–±‚ñë",
        "‚ñë—è –ª—é‚ñë", "‚ñë–ª‚ñë", "‚ñë", "‚ñë–í‚ñë", "‚ñë–í–æ–∑‚ñë", "‚ñë–í–æ–∑–≤—Ä‚ñë", "‚ñë–í–æ–∑–≤—Ä–∞—â‚ñë", "‚ñë–í–æ–∑–≤—Ä–∞—â–∞–π‚ñë", "‚ñë–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è‚ñë",
        "‚ñë–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è..‚ñë", "‚ñë–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è...‚ñë", "‚ñë–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è....‚ñë", "‚ñë–í–æ–∑–≤—Ä–∞—â–∞–π‚ñë", "‚ñë–í–æ–∑–≤—Ä–∞—â‚ñë", "‚ñë–í–æ–∑–≤—Ä‚ñë", "‚ñë–í–æ–∑‚ñë", "‚ñë–í‚ñë",
        "‚ñë..‚ñë", "‚ñë...‚ñë", "‚ñë–Ø‚ñë", "‚ñë–Ø –Ω–µ‚ñë", "‚ñë–Ø –Ω–µ –º–æ‚ñë", "‚ñë–Ø –Ω–µ –º–æ–≥—É‚ñë", "‚ñë–Ø –Ω–µ –º–æ–≥—É –±–µ‚ñë", "‚ñë–Ø –Ω–µ –º–æ–≥—É –±–µ–∑ —Ç‚ñë",
        "‚ñë–Ø –Ω–µ –º–æ–≥—É –±–µ–∑ —Ç–µ–±‚ñë", "‚ñë–Ø –Ω–µ –º–æ–≥—É –±–µ–∑ —Ç–µ–±—è‚ñë", "‚ñë–Ø –Ω–µ –º–æ–≥—É –±–µ–∑ —Ç–µ–±—è.‚ñë", "‚ñë–Ø –Ω–µ –º–æ–≥—É –±–µ–∑ —Ç–µ–±—è..‚ñë", "‚ñë–Ø –Ω–µ –º–æ–≥—É –±–µ–∑ —Ç–µ–±—è...‚ñë"
    ]
    for text in animation_sequence:
        await message.edit(text)
        await asyncio.sleep(0.5)
    await event.delete()

load_modules(client)
client.start()
print("‚úÖ faust tool –∑–∞–ø—É—â–µ–Ω!")
client.run_until_disconnected()
